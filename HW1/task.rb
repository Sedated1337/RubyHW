# frozen_string_literal: true

puts '1. Дан целочисленный массив.
Необходимо вывести вначале его элементы с четными индексами, а затем - с нечетными.'
num = [0, 2, 4, 5, 7, 8, 12]

list = num.group_by.with_index do |_el, i|
  i.odd? ? :odd_index : :even_index
end
puts list
puts '--------------'

puts '2. Дан целочисленный массив.
Необходимо вывести вначале его элементы с нечетными индексами, а затем - четными.'
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
even = num.find_all(&:odd?).to_s
odd  = num.find_all(&:even?).to_s
puts odd
puts
puts even
puts '--------------'

p '3. Дан целочисленный массив. Вывести номер первого из тех его элементов,
которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list = num.index { |e| num[0] < e && e < num[-1] } || []
p list
p '--------------'

p '4. Дан целочисленный массив. Вывести номер последнего из тех его элементов,
которые удовлетворяют двойному неравенству: A[0] < A[i] < A[-1]. Если таких элементов нет, то вывести [ ].'
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list = num.rindex { |e| num[0] < e && e < num[-1] } || []
p list
p '--------------'

p ' 5. Дан целочисленный массив. Преобразовать его, прибавив к четным числам первый элемент.
Первый и последний элементы массива не изменять.'
num = [1, 4, 7, 9, 14, 36, 58, 64, 13]
list = num.map { |e| e.even? && (e != num[0] && e != num[-1]) ? e + num.first : e }
p list
p '--------------'

p ' 6. Дан целочисленный массив. Преобразовать его, прибавив к четным числам последний элемент. Первый и последний элементы массива не изменять.'
num = [1, 4, 7, 9, 14, 36, 58, 64, 13]
list = num.map { |element| element.even? && (element != num[0] && element != num[-1]) ? element + num.last : element }
p list

puts '9. Дан целочисленный массив.
Заменить все положительные элементы на значение минимального.'
num = [2, 3, 5, 6, 8, -2, -3, -6, -5]
list = num.map do |e|
  if e.positive?
    num.min
  else
    e
  end
end
puts list.to_s
puts '--------------'

puts '10. Дан целочисленный массив.
Заменить все положительные элементы на значение максимального.'
num = [2, 3, 5, 6, 8, -2, -3, -6, -5]
list = num.map do |e|
  if e.positive?
    num.max
  else
    e
  end
end
puts list.to_s
puts '--------------'

puts '11. Дан целочисленный массив.
Заменить все отрицательные элементы на значение минимального.'
num = [2, 3, 5, 6, 8, -2, -3, -6, -5]
list = num.map do |e|
  if e.negative?
    num.min
  else
    e
  end
end
puts list.to_s
puts '--------------'

puts '12. Дан целочисленный массив.
Заменить все отрицательные элементы на значение максимального.'
num = [2, 3, 5, 6, 8, -2, -3, -6, -5]
list = num.map do |e|
  if e.negative?
    num.max
  else
    e
  end
end
puts list.to_s
puts '--------------'

puts '13. Дан целочисленный массив.
Осуществить циклический сдвиг элементов массива влево на одну позицию.'
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list = num.rotate(1)
puts list.to_s
puts '--------------'

puts '14. Дан целочисленный массив.
Осуществить циклический сдвиг элементов массива вправо на одну позицию.'
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
list = num.rotate(-1)
puts list.to_s
puts '--------------'

puts '29. Дан целочисленный массив.
Упорядочить его по возрастанию.'
num = [2, 4, 6, 5, 1, 3, 7, 10, 9, 8]
list = num.sort
puts list.to_s
puts '--------------'

puts '30. Дан целочисленный массив.
Упорядочить его по убыванию.'
num = [2, 4, 6, 5, 1, 3, 7, 10, 9, 8]
list = num.sort.reverse
puts list.to_s
puts '--------------'

puts '33. Дан целочисленный массив.
Найти индекс минимального элемента.'
num = [111, 8, 45, 9, 10]
list = num.index(num.min)
puts list.to_s
puts '--------------'

puts '34. Дан целочисленный массив.
Найти индекс максимального элемента.'
num = [111, 8, 45, 9, 10]
list = num.index.max
puts list.to_s
puts '--------------'

puts '35. Дан целочисленный массив.
Найти индекс первого минимального элемента.'
num = [111, 77, 45, 9, 1]
list = num.index.min(num.first)
puts list.to_s
puts '--------------'

puts '36. Дан целочисленный массив.
Найти индекс первого миксимального элемента.'
num = [111, 77, 45, 9, 224]
list = num.index.max(num.first)
puts list.to_s
puts '--------------'

puts '37. Дан целочисленный массив.
Найти индекс последнего минимального элемента.'
num = [111, 67, 345, 9, 63]
list = num.index.min(num.last)
puts list.to_s
puts '--------------'

puts '38. Дан целочисленный массив.
Найти индекс последнего максимального элемента.'
num = [111, 67, 345, 9, 63]
list = num.index.max(num.last)
puts list.to_s
puts '--------------'

p '39. Дан целочисленный массив. Найти количество максимальных элементов.'
num = [111, 67, 345, 9, 63, 111, 53]
list = num.select { |i| i == num.max }.count
p list
'--------------'

p '40. Дан целочисленный массив. Найти количество минимальных элементов.'
num = [111, 67, 345, 9, 63, 9, 123]
list = num.select { |i| i == num.min }.count
p list
'--------------'

puts '41. Дан целочисленный массив.
Найти минимальный четный элемент.'
num = [111, 67, 345, 9, 63, 22, 5, 10]
list = num.find_all(&:even?).min
puts list
puts '--------------'

puts '42. Дан целочисленный массив.
Найти минимальный нечетный элемент.'
num = [111, 67, 345, 9, 63, 22, 5, 10]
list = num.find_all(&:odd?).min
puts list
puts '--------------'

puts '43. Дан целочисленный массив.
Найти максимальный четный элемент.'
num = [111, 522, 345, 9, 63, 22, 5, 10]
list = num.find_all(&:even?).max
puts list
puts '--------------'

puts '44. Дан целочисленный массив.
Найти максимальный нечетный элемент.'
num = [111, 67, 345, 9, 63, 22, 5, 10]
list = num.find_all(&:odd?).max
puts list
puts '--------------'

puts '45. Дан целочисленный массив.
Найти минимальный положительный элемент.'
num = [111, 67, 345, 9, 63, 22, 5, 10, -124, -155]
list = num.find_all(&:positive?).min
puts list
puts '--------------'

puts '46. Дан целочисленный массив.
Найти максимальный отрицательный элемент'
num = [111, 67, 345, 9, 63, 22, 5, 10, -124, -155, - 11]
list = num.find_all(&:negative?).max
puts list
puts '--------------'

p '47. Дан целочисленный массив и интервал a..b. Найти минимальный из элементов в этом интервале.'
p num = [123, 21, -333, 11, 55, 2]
p num [0...-1].min
p '--------------'

puts '48. Дан целочисленный массив и интервал a..b. Найти максимальный из элементов в этом интервале.'
p num = [123, 21, -333, 11, 55, 2]
p num [0...-1].max
p '--------------'

puts '61. Дан целочисленный массив. Найти два наибольших элемента.'
num = [111, 67, 345, 9, 63, 22, 5, 10, -124, -155, - 11]
list = num.max(2)
puts list
puts '--------------'

puts '62. Дан целочисленный массив. Найти два наименьших элемента.'
num = [111, 67, 345, 9, 63, 22, 5, 10, -124, -155, - 11]
list = num.min(2)
puts list
puts '--------------'

puts '71. Дан целочисленный массив.
Удалить все элементы, встречающиеся менее двух раз.'
num = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
list = num.reject { |e| num.count(e) < 2 }
puts list
puts '--------------'

puts '72. Дан целочисленный массив.
Удалить все элементы, встречающиеся более двух раз.'
num = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
list = num.reject { |e| num.count(e) > 2 }
puts list
puts '--------------'

puts '73. Дан целочисленный массив.
Удалить все элементы, встречающиеся ровно два раза.'
num = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
list = num.reject { |e| num.count(e) == 2 }
puts list
puts '--------------'

puts '74. Дан целочисленный массив.
Удалить все элементы, встречающиеся ровно три раза.'
num = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]
list = num.reject { |e| num.count(e) == 3 }
puts list
puts '--------------'

puts '77. Дано целое число. Найти сумму его цифр.'
k = 39
list = k.digits.sum
puts list
puts '--------------'

puts '76. Дан целочисленный массив. Найти среднее арифметическое квадратов его элементов.'
num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 20, 40, 50, 60, 70]
list = num.map { |el| el**2 }.sum / num.size
puts list
p '--------------'

puts '96. Дан целочисленный массив и число К.
Вывести индекс первого элемента, большего К.'
num = [3, 11, 2, 10]
k = 9
bigger = num.index { |i| i > k }
puts bigger
puts '--------------'

puts '97. Дан целочисленный массив и число К.
Вывести индекс последнего элемента, меньшего К.'
num = [3, 11, 2, 10]
k = 9
smaller = num.rindex { |e| e < k }
puts smaller
puts '--------------'

puts '95. Дан целочисленный массив и число К.
Вывести количество элементов, меньших К.'
num = [3, 11, 2, 10]
k = 9
list = num.count { |e| e < k }
puts list
puts '--------------'

puts '94. Дан целочисленный массив и число К.
Если все элементы массива больше К, то вывести true; в противном случае вывести false.'
num = [25, 22, 13, 234]
k = 12
list = num.all? { |e| e > k }
puts list
puts '--------------'

puts '93. Дан целочисленный массив и число К.
Если все элементы массива меньше К, то вывести true; в противном случае вывести false.'
num = [25, 22, 13, 234]
k = 134
list = num.all? { |e| e < k }
puts list
puts '--------------'

puts '92. Дан целочисленный массив и число К.
Если существует элемент, больший К, то вывести true; в противном случае вывести false.'
num = [25, 22, 13, 234]
k = 134
list = num.any? { |e| e > k }
puts list
puts '--------------'

puts '91. Дан целочисленный массив и число К.
Если существует элемент, меньший К, то вывести true; в противном случае вывести false.'
num = [7, 6, 91, 82]
k = 10
list = num.any? { |e| e < k }
puts list
puts '--------------'

puts '90. Дан целочисленный массив.
Найти количество нечетных элементов'
num = [7, 6, 91, 82]
list = num.count(&:odd?)
puts list
puts '--------------'

puts '89. Дан целочисленный массив.
Найти все нечетные элементы.'
num = [3, 5, 4, 2, 7, 6, 1, 8, 9, 10, -1, -2, -3, -4]
list = num.find_all(&:odd?)
puts list
puts '--------------'

puts '88. Дан целочисленный массив.
Найти количество четных элементов.'
num = [3, 5, 4, 2, 7, 6, 1, 8, 9, 10, -1, -2, -3, -4]
list = num.count(&:even?)
puts list
puts '--------------'

puts '87. Дан целочисленный массив.
Найти все четные элементы'
num = [3, 5, 4, 2, 7, 6, 1, 8, 9, 10, -1, -2, -3, -4]
list = num.find_all(&:even?)
puts list
puts '--------------'

puts '86. Дан целочисленный массив.
Найти среднее арифметическое его элементов.'
num = [3, 5, 4, 2, 7, 6, 1, 8, 9, 10]
list = num.inject { |sum, e| sum + e }.to_f / num.size
puts list
puts '--------------'
